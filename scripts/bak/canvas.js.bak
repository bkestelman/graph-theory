/** 
 * CanvasGraph
 * Augments Graph, Vertex, and Edge with functionality for drawing on an HTML Canvas
 */
var vrad = 12
var CanvasVertex = function(x, y) {
	var base = new Vertex()
	this.edges = base.edges
	this.x = x
	this.y = y
	this.path = new Path2D() 
	this.path.arc(x, y, vrad, 0, 2 * Math.PI)
	this.contains = function(x, y) {
		return ctx.isPointInPath(this.path, x, y)
	}
}
CanvasVertex.prototype = new Vertex()
var CanvasEdge = function(vertices) {
	this.vertices = new VertexCollection(vertices)
	this.path = new Path2D()
	this.path.moveTo(vertices[0].x, vertices[0].y)
	this.path.lineTo(vertices[1].x, vertices[1].y)
}
CanvasEdge.prototype = new Edge()
var CanvasGraph = function(g) {
	//console.log('constructing CanvasGraph')
	var base = new Graph(g)
	this.vertices = base.vertices
	this.edges = base.edges
	var lastDrawn
	this.addV = function(v) {
		var oldv = this.getV(v.x, v.y)
		if (oldv) { // if ~v in graph 
			if (lastDrawn) { // if we're drawing
				Graph.prototype.addE.call( this, new CanvasEdge([ lastDrawn, oldv ]) ) // add Edge
				lastDrawn = undefined // close graph
			}
			else {
				lastDrawn = oldv
			}
			return oldv // return the existing v in graph
		}
		Graph.prototype.addV.call(this, v) // add v to the VertexCollection
		if (lastDrawn) { // if we're drawing
			Graph.prototype.addE.call( this, new CanvasEdge([ lastDrawn, v ]) ) // add Edge
		}
		lastDrawn = v
	}
	this.delV = function(v) {
		if (!v) return
		if (v === lastDrawn) {
			lastDrawn = undefined
		}
		Graph.prototype.delV.call(this, v)
	}
	this.draw = function() {
		for (var v of this.vertices) {
			ctx.stroke(v.path)
		}
		for (var e of this.edges) {
			ctx.stroke(e.path)
		}
	}
	this.getV = function(x, y) {
		for (var v of this.vertices) {
			if (v.contains(x, y)) {
				return v
			}
		}
	}
	//console.log(this)
}
CanvasGraph.prototype = new Graph()

var graph = new CanvasGraph()
var graph2 = new CanvasGraph()
console.log(graph)
console.log(graph.vertices)
var canvas = document.getElementById('canvas')
var ctx = canvas.getContext('2d')

canvas.addEventListener('click', function(event) {
	console.log('click')
	var x = event.offsetX
	var y = event.offsetY 
	graph.addV(new CanvasVertex(x, y))
	//redraw()
})
canvas.addEventListener('contextmenu', function(event) { // right click
	event.preventDefault() // don't open menu
	console.log('right click')
	var x = event.offsetX
	var y = event.offsetY 
	graph.delV(graph.getV(x, y))
	console.log(graph)
	//redraw()
	return false
})

function redraw() {
	ctx.clearRect(0, 0, canvas.width, canvas.height)
	graph.draw()
	window.requestAnimationFrame(redraw) // really, we should only call this when the graph is changed (on click or on update)
}
window.requestAnimationFrame(redraw) 
